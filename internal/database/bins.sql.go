// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: bins.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createBin = `-- name: CreateBin :one
INSERT INTO bins (id, created_at, updated_at, name)
VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1
)
RETURNING id, created_at, updated_at, name, parent_bin
`

func (q *Queries) CreateBin(ctx context.Context, name string) (Bin, error) {
	row := q.db.QueryRowContext(ctx, createBin, name)
	var i Bin
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.ParentBin,
	)
	return i, err
}

const deleteAllBins = `-- name: DeleteAllBins :exec
DELETE FROM bins
`

func (q *Queries) DeleteAllBins(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllBins)
	return err
}

const deleteBinByID = `-- name: DeleteBinByID :one
DELETE FROM bins
WHERE id = $1
RETURNING id, created_at, updated_at, name, parent_bin
`

func (q *Queries) DeleteBinByID(ctx context.Context, id uuid.UUID) (Bin, error) {
	row := q.db.QueryRowContext(ctx, deleteBinByID, id)
	var i Bin
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.ParentBin,
	)
	return i, err
}

const deleteBinByName = `-- name: DeleteBinByName :one
DELETE FROM bins
WHERE name = $1
RETURNING id, created_at, updated_at, name, parent_bin
`

func (q *Queries) DeleteBinByName(ctx context.Context, name string) (Bin, error) {
	row := q.db.QueryRowContext(ctx, deleteBinByName, name)
	var i Bin
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.ParentBin,
	)
	return i, err
}

const getBinByID = `-- name: GetBinByID :one
SELECT id, created_at, updated_at, name, parent_bin FROM bins
WHERE id = $1
`

func (q *Queries) GetBinByID(ctx context.Context, id uuid.UUID) (Bin, error) {
	row := q.db.QueryRowContext(ctx, getBinByID, id)
	var i Bin
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.ParentBin,
	)
	return i, err
}

const getBinByName = `-- name: GetBinByName :one
SELECT id, created_at, updated_at, name, parent_bin FROM bins
WHERE name = $1
`

func (q *Queries) GetBinByName(ctx context.Context, name string) (Bin, error) {
	row := q.db.QueryRowContext(ctx, getBinByName, name)
	var i Bin
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.ParentBin,
	)
	return i, err
}
