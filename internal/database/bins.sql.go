// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: bins.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createBin = `-- name: CreateBin :one
INSERT INTO bins (id, created_at, updated_at, name, parent_id)
VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1,
    $2
)
RETURNING id, serial_number, created_at, updated_at, name, sku, parent_id, parent_id_or_null
`

type CreateBinParams struct {
	Name     string
	ParentID uuid.NullUUID
}

func (q *Queries) CreateBin(ctx context.Context, arg CreateBinParams) (Bin, error) {
	row := q.db.QueryRowContext(ctx, createBin, arg.Name, arg.ParentID)
	var i Bin
	err := row.Scan(
		&i.ID,
		&i.SerialNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Sku,
		&i.ParentID,
		&i.ParentIDOrNull,
	)
	return i, err
}

const deleteAllBins = `-- name: DeleteAllBins :exec
DELETE FROM bins
`

func (q *Queries) DeleteAllBins(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllBins)
	return err
}

const deleteBin = `-- name: DeleteBin :exec
DELETE FROM bins
WHERE (name = $1 AND (parent_id IS NOT DISTINCT FROM $2))
OR id = $3
`

type DeleteBinParams struct {
	Name     string
	ParentID uuid.NullUUID
	ID       uuid.UUID
}

func (q *Queries) DeleteBin(ctx context.Context, arg DeleteBinParams) error {
	_, err := q.db.ExecContext(ctx, deleteBin, arg.Name, arg.ParentID, arg.ID)
	return err
}

const getBin = `-- name: GetBin :one
SELECT id, serial_number, created_at, updated_at, name, sku, parent_id, parent_id_or_null FROM bins
WHERE (name = $1 AND (parent_id IS NOT DISTINCT FROM $2))
OR id = $3
OR sku = $4
`

type GetBinParams struct {
	Name     string
	ParentID uuid.NullUUID
	ID       uuid.UUID
	Sku      sql.NullString
}

func (q *Queries) GetBin(ctx context.Context, arg GetBinParams) (Bin, error) {
	row := q.db.QueryRowContext(ctx, getBin,
		arg.Name,
		arg.ParentID,
		arg.ID,
		arg.Sku,
	)
	var i Bin
	err := row.Scan(
		&i.ID,
		&i.SerialNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Sku,
		&i.ParentID,
		&i.ParentIDOrNull,
	)
	return i, err
}

const getBinsByParent = `-- name: GetBinsByParent :many
SELECT id, serial_number, created_at, updated_at, name, sku, parent_id, parent_id_or_null FROM bins
WHERE (parent_id = $1 OR (parent_id IS NULL AND $1 IS NULL))
`

func (q *Queries) GetBinsByParent(ctx context.Context, parentID uuid.NullUUID) ([]Bin, error) {
	rows, err := q.db.QueryContext(ctx, getBinsByParent, parentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Bin
	for rows.Next() {
		var i Bin
		if err := rows.Scan(
			&i.ID,
			&i.SerialNumber,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Sku,
			&i.ParentID,
			&i.ParentIDOrNull,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBinName = `-- name: UpdateBinName :one
UPDATE bins SET name = $3, updated_at = NOW()
WHERE name = $1
AND (parent_id IS NOT DISTINCT FROM $2)
RETURNING id, serial_number, created_at, updated_at, name, sku, parent_id, parent_id_or_null
`

type UpdateBinNameParams struct {
	Name     string
	ParentID uuid.NullUUID
	Name_2   string
}

func (q *Queries) UpdateBinName(ctx context.Context, arg UpdateBinNameParams) (Bin, error) {
	row := q.db.QueryRowContext(ctx, updateBinName, arg.Name, arg.ParentID, arg.Name_2)
	var i Bin
	err := row.Scan(
		&i.ID,
		&i.SerialNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Sku,
		&i.ParentID,
		&i.ParentIDOrNull,
	)
	return i, err
}

const updateBinParent = `-- name: UpdateBinParent :exec
UPDATE bins SET parent_id = $3, updated_at = NOW()
WHERE name = $1
AND (parent_id IS NOT DISTINCT FROM $2)
`

type UpdateBinParentParams struct {
	Name       string
	ParentID   uuid.NullUUID
	ParentID_2 uuid.NullUUID
}

func (q *Queries) UpdateBinParent(ctx context.Context, arg UpdateBinParentParams) error {
	_, err := q.db.ExecContext(ctx, updateBinParent, arg.Name, arg.ParentID, arg.ParentID_2)
	return err
}

const updateBinSku = `-- name: UpdateBinSku :exec
UPDATE bins SET sku = $2
WHERE id = $1
`

type UpdateBinSkuParams struct {
	ID  uuid.UUID
	Sku sql.NullString
}

func (q *Queries) UpdateBinSku(ctx context.Context, arg UpdateBinSkuParams) error {
	_, err := q.db.ExecContext(ctx, updateBinSku, arg.ID, arg.Sku)
	return err
}
