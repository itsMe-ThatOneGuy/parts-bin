// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: parts.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createPart = `-- name: CreatePart :one
INSERT INTO parts (id, created_at, updated_at, name, parent_id)
VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1,
    $2
)
RETURNING part_id, id, created_at, updated_at, name, sku, parent_id
`

type CreatePartParams struct {
	Name     string
	ParentID uuid.UUID
}

func (q *Queries) CreatePart(ctx context.Context, arg CreatePartParams) (Part, error) {
	row := q.db.QueryRowContext(ctx, createPart, arg.Name, arg.ParentID)
	var i Part
	err := row.Scan(
		&i.PartID,
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Sku,
		&i.ParentID,
	)
	return i, err
}

const createSku = `-- name: CreateSku :exec
UPDATE parts SET sku = $2
WHERE part_id = $1
`

type CreateSkuParams struct {
	PartID int32
	Sku    sql.NullString
}

func (q *Queries) CreateSku(ctx context.Context, arg CreateSkuParams) error {
	_, err := q.db.ExecContext(ctx, createSku, arg.PartID, arg.Sku)
	return err
}
